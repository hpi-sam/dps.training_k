version: '3.8'

volumes:
  local_postgres_data: { }
  local_postgres_data_backups: { }
  static_volume: { }

services:
  web:
    image: ghcr.io/hpi-sam/dps_training_k-frontend:latest
    container_name: K-dPS-frontend
    ports:
      - "5173:5173"
    
  django:
    image: ghcr.io/hpi-sam/dps_training_k-django:latest
    container_name: K-dPS-django
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    environment:
      - RUN_MIGRATIONS=1
    volumes:
      - static_volume:/app/staticfiles
    expose:
      - 8000
    command: uvicorn configuration.asgi:application --host 0.0.0.0 --reload


  postgres:
    image: ghcr.io/hpi-sam/dps_training_k-postgres:latest
    container_name: K-dPS-postgres
    volumes:
      - local_postgres_data:/var/lib/postgresql/data:Z
      - local_postgres_data_backups:/backups:z
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: K-dPS-redis

  celeryworker:
    env_file:
      - .env
    image: ghcr.io/hpi-sam/dps_training_k-celeryworker:latest
    container_name: K-dPS-celeryworker
    command: /start-celeryworker
    depends_on:
      - django

  celerybeat:
    env_file:
      - .env
    image: ghcr.io/hpi-sam/dps_training_k-celerybeat:latest
    container_name: K-dPS-celerybeat
    command: /start-celerybeat
    depends_on:
      - django

  nginx:
    image: ghcr.io/hpi-sam/dps_training_k-nginx:latest
    container_name: K-dPS-nginx
    volumes:
      - static_volume:/app/staticfiles
    ports:
      - "8000:80"
    depends_on:
      - django